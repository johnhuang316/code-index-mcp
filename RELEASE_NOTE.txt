## 2.4.1 - Search Filtering Alignment

### Highlights
- Code search now shares the central FileFilter blacklist, keeping results consistent with indexing (no more `node_modules` noise).
- CLI search strategies emit the appropriate exclusion flags automatically (ripgrep, ugrep, ag, grep).
- Basic fallback search prunes excluded directories during traversal, avoiding unnecessary IO.
- Added regression coverage for the new filtering behaviour (`tests/search/test_search_filters.py`).

### Upgrade Notes
- No new dependencies; update via standard `uv sync` after pulling.
- Run `uv run pytest` to confirm the new search filter tests on your environment.

## Shallow Index Default & Streamlined Server

This release focuses on faster first-run experiences and a slimmer MCP surface area.

### Highlights

- **Shallow index by default**: Projects initialize with the new JSON-based shallow index for rapid file discovery.
- **Deep index on demand**: Added the `build_deep_index` tool so symbol extraction happens only when you request it.
- **Watcher-friendly rebuilds**: File watcher callbacks now refresh the shallow index, keeping file lists current without long rebuilds.
- **Server cleanup**: Removed unused `structure://project` resource, legacy prompts, and auxiliary documents for a leaner runtime.

### Developer Experience Improvements

- `find_files` now enforces true glob semantics (single `*` for one segment, `**` for recursive matches).
- `get_file_summary` responds with a `needs_deep_index` hint when deep symbols are unavailable.
- Index management services split shallow vs deep rebuild paths to clarify tool behavior.
- Repository docs (README, localized copies) highlight when to run `build_deep_index`.

### Cleanups

- Removed deprecated architecture and benchmarking documents.
- Trimmed benchmark scripts and outdated tests tied to the old SCIP experiment.

### Upgrade Notes

1. After updating, call `set_project_path` as usual - the server will build the shallow index automatically.
2. Run `build_deep_index` whenever you need symbol-level summaries (`get_file_summary`) or deep search capabilities.
3. Optionally run `refresh_index` to refresh the shallow index if the watcher is disabled.

### Compatibility

- Tool names and signatures are unchanged.
- Deep-index workflows remain available; they now require an explicit `build_deep_index` call.
- Python 3.10+ requirement unchanged; no new third-party dependencies.

Enjoy faster cold starts and a simpler interface tailored for LLM-driven workflows.
